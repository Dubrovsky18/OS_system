- name: Install the keepalived from a remote repo
  yum:
    name:
      - keepalived
    state: latest
  tags: without-keep

- name: allow binding non-local IPv4
  sysctl:
    name: net.ipv4.ip_nonlocal_bind
    value: "{{ keepalived_ip_nonlocal_bind }}"	
    reload: true
    state: present
  when: keepalived_ip_nonlocal_bind
  tags: sys
        
- name: config keepalive
  template:
    src: keepalived.conf.j2
    dest: /etc/keepalived/keepalived.conf
  notify: 
    - restart keepalived
  with_items:
    - "{{ groups['pgsql2'] }}"
  tags: keep

# - name: Make sure a service keepalived is running
#   ansible.builtin.systemd:
#     state: restarted
#     name: keepalived
#   enabled: yes


- name: Download web
  shell: "sudo yum install -y https://download.postgresql.org/pub/repos/yum/reporpms/EL-7-x86_64/pgdg-redhat-repo-latest.noarch.rpm"


- name: Install pgsql
  yum:
    name: postgresql14-server

    # - name: "Find out if PostgreSQL is initialized"
    #   ansible.builtin.stat:
    #     path: "/var/lib/pgsql/data/pg_hba.conf"
    #   register: postgres_data

- name: "Initialize PostgreSQL"
  shell: "/usr/pgsql-14/bin/postgresql-14-setup initdb"
      # when: not postgres_data.stat.exists


- name: Postgresql
  shell: "systemctl enable postgresql-14"
    

- name: Pg_hba-config
  template:
    scr: pg_hba.conf
    dest: /var/lib/pgsql/14/data/pg_hba.conf
  notify:
    - restart postgres

- name: postgres-config
  template:
    scr: postgresql.conf
    dest: /var/lib/pgsql/14/data/postgresql.conf
  notify:
    - restart postgres 



  #   - name: "Start and enable services"
  #     service: "name={{ item }} state=started enabled=yes"
  #     with_items:
  #       - postgresql

    # - name: "Create app database"
    #   postgresql_db:
    #     state: present
    #     name: "{{ db_name }}"
    #   become: yes
    #   become_user: postgres

    # - name: "Create db user"
    #   postgresql_user:
    #     state: present
    #     name: "{{ db_user }}"
    #     password: "{{ db_password }}"
    #   become: yes
    #   become_user: postgres

    # - name: "Grant db user access to app db"
    #   postgresql_privs:
    #     type: database
    #     database: "{{ db_name }}"
    #     roles: "{{ db_user }}"
    #     grant_option: no
    #     privs: all
    #   become: yes
    #   become_user: postgres

    # - name: "Allow md5 connection for the db user"
    #   postgresql_pg_hba:
    #     dest: "~/data/pg_hba.conf"
    #     contype: host
    #     databases: all
    #     method: md5
    #     users: "{{ db_user }}"
    #     create: true
    #   become: yes
    #   become_user: postgres
    #   notify: restart postgres

    # - name: "Load SQL script into a variable"
    #   set_fact:
    #     migration_sql: "{{ lookup('file', 'conf/migration.sql') }}"

    # - name: "Execute script from variable"
    #   command: "psql {{ db_name }} -c {{ migration_sql }}"
    #   become_user: postgres
    #   register: sql_response_variable
